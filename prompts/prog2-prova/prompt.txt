Analise o código Python abaixo para o assignment "{assignment_name}".

DESCRIÇÃO DO ASSIGNMENT:
{assignment_description}

REQUISITOS ESPECÍFICOS:
{assignment_requirements}

CÓDIGO DO ENUNCIADO:
{enunciado_code}

CÓDIGO DO ALUNO:
{student_code}

=== CRITÉRIOS FUNDAMENTAIS DE AVALIAÇÃO ===

**DEFINIÇÃO DE PROBLEMAS vs SUGESTÕES:**

**PROBLEMAS (só inclua aqui se for CRÍTICO):**
- Requisitos OBRIGATÓRIOS do enunciado que estão AUSENTES ou INCORRETOS
- Funções ou componentes obrigatórios que não foram implementados ou não funcionam
- Estrutura de código que não segue o especificado no enunciado
- Funcionalidades essenciais que não operam corretamente

**SUGESTÕES (inclua aqui melhorias opcionais):**
- Melhorias de código que não são obrigatórias
- Otimizações de performance que não afetam funcionalidade
- Adições de funcionalidades extras que enriquecem mas não são exigidas
- Melhorias de legibilidade ou organização não obrigatórias
- Sugestões de boas práticas que não são requisitos

**EXEMPLOS DE CLASSIFICAÇÃO:**
- ❌ PROBLEMA: "Banco de dados não tem relacionamento N:N" (se for obrigatório)
- ✅ SUGESTÃO: "Poderia adicionar mais tratamento de erros nas queries"
- ❌ PROBLEMA: "Aplicação de terminal não integra com API de câmbio" (se for obrigatório)
- ✅ SUGESTÃO: "Poderia melhorar a apresentação visual dos componentes do dashboard"

=== INSTRUÇÕES DE AVALIAÇÃO ESPECÍFICAS ===

Este é um assignment de prova final que integra Banco de Dados PostgreSQL + API de Câmbio + Aplicação Terminal + Dashboard Streamlit. Avalie considerando:

1. **Banco de Dados PostgreSQL (25% do peso)**:
   - Deve ter de 3 a 4 tabelas conforme especificado
   - Deve possuir relacionamento N:N (tabela intermediária com 2+ foreign keys)
   - Todos os campos devem ser NOT NULL ou SERIAL/IDENTITY
   - Deve ter pelo menos um campo DATE, um DECIMAL (para valores monetários), VARCHAR e INTEGER
   - Relacionamentos devem estar explicitamente definidos
   - Deve ter de 5-10 registros por tabela
   - Arquivo bd.sql deve permitir reconstrução completa do banco
   - Commit obrigatório: "Cria banco de dados inicial"

2. **Aplicação de Terminal (25% do peso)**:
   - Deve integrar com Brasil API de câmbio (GET /api/v1/cambio/moedas e GET /api/v1/cambio/cotacao/{{moeda}}/{{data}})
   - Deve solicitar valor em R$ e moeda de destino do usuário
   - Deve fazer requisições HTTP corretas e parsear JSON
   - Deve calcular conversão de valores R$ → outras moedas
   - Deve usar formato de data YYYYMMDD (ex: 20241220)
   - Arquivo main.py deve estar funcional
   - Commit obrigatório: "Implementa aplicacao de terminal com API de cambio"

3. **Dashboard Streamlit (40% do peso)**:
   - Deve se conectar ao banco PostgreSQL usando SQLAlchemy
   - Query da tabela principal deve usar pelo menos 1 JOIN
   - Deve ter filtro interativo funcional (selectbox ou multiselect)
   - Deve integrar conversão de moedas usando Brasil API
   - Deve converter campo DECIMAL do banco usando cotações ao vivo
   - Deve ter gráfico (qualquer tipo EXCETO barras)
   - Interface deve ser funcional e apresentar dados corretamente
   - Arquivo app_streamlit.py deve estar funcional
   - Commit obrigatório: "Finaliza dashboard Streamlit com conversao de moedas"

4. **Estrutura e Organização (10% do peso)**:
   - Arquivos bd.sql, main.py e app_streamlit.py devem estar presentes
   - Commits devem seguir as mensagens obrigatórias especificadas
   - Código deve estar organizado e funcional

=== FORMATO DE RESPOSTA ===

Formate sua resposta EXATAMENTE assim:

NOTA: [número de 0 a 10]
JUSTIFICATIVA: [justificativa resumida e clara da nota]

COMPONENTES:
- Banco de Dados (3-4 tabelas, N:N, tipos corretos): [Presente/Ausente/Parcial]
- Aplicação Terminal (integração API de câmbio): [Presente/Ausente/Parcial]
- Dashboard Streamlit (JOIN + filtro + gráfico + conversão): [Presente/Ausente/Parcial]
- Commits Obrigatórios: [Presente/Ausente/Parcial]

COMENTARIOS: [lista de comentários sobre pontos positivos]

SUGESTOES: [lista de sugestões de melhoria - apenas melhorias opcionais]

PROBLEMAS: [lista de problemas encontrados - apenas requisitos obrigatórios ausentes/incorretos]

=== REGRAS CRÍTICAS ===

1. **NOTA 10**: Se TODOS os requisitos obrigatórios do enunciado foram cumpridos
2. **PROBLEMAS**: Só inclua requisitos OBRIGATÓRIOS ausentes/incorretos
3. **SUGESTÕES**: Inclua melhorias opcionais e aperfeiçoamentos
4. **NÃO CONFUNDA**: Melhorias não são problemas, problemas são falhas obrigatórias
5. **BASEIE A NOTA**: Nos requisitos do enunciado, não em suas preferências pessoais

IMPORTANTE: Este é um teste final que avalia conhecimentos de SQL, banco de dados relacional, integração com APIs RESTful, manipulação de dados e dashboards interativos. Priorize a correta implementação dos 3 componentes principais (banco, terminal, dashboard), com especial atenção aos relacionamentos N:N, integração com Brasil API e conversão de moedas no dashboard.
