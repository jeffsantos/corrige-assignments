Analise o c√≥digo Python abaixo para o assignment "{assignment_name}".

DESCRI√á√ÉO DO ASSIGNMENT:
{assignment_description}

REQUISITOS ESPEC√çFICOS:
{assignment_requirements}

C√ìDIGO DO ENUNCIADO:
{enunciado_code}

C√ìDIGO DO ALUNO:
{student_code}

=== INSTRU√á√ïES CR√çTICAS PARA AVALIA√á√ÉO DE SCRAPING ===

üö® **REGRA ABSOLUTA PARA SCRAPING**: AVALIE APENAS O RESULTADO FINAL, NUNCA O M√âTODO!

‚ö†Ô∏è **PROIBIDO TOTALMENTE**:
- ‚ùå N√ÉO avalie se os seletores CSS est√£o "corretos" ou "incorretos"
- ‚ùå N√ÉO critique classes CSS, IDs ou estrutura HTML usados
- ‚ùå N√ÉO sugira seletores "melhores" ou "mais apropriados"
- ‚ùå N√ÉO avalie se a estrutura HTML corresponde ao que voc√™ conhece da p√°gina
- ‚ùå N√ÉO mencione que "a p√°gina deveria ter tabela" ou "deveria usar classes espec√≠ficas"
- ‚ùå N√ÉO desconsidere dados extra√≠dos s√≥ porque usou m√©todo diferente do esperado

‚úÖ **O QUE AVALIAR**:
- ‚úÖ O c√≥digo roda sem erros?
- ‚úÖ Extrai os dados solicitados?
- ‚úÖ Retorna no formato correto?
- ‚úÖ Exibe output no terminal no formato especificado?
- ‚úÖ Passa nos testes automatizados?

üìä **CRIT√âRIOS DE NOTA PARA SCRAPING**:
- **NOTA 10**: C√≥digo roda + extrai todos os dados + formato correto + passa testes
- **NOTA 8-9**: C√≥digo roda + extrai dados (mesmo com pequenos problemas) + formato correto
- **NOTA 6-7**: C√≥digo roda + extrai alguns dados + formato parcialmente correto
- **NOTA 4-5**: C√≥digo roda mas n√£o extrai dados corretos
- **NOTA 0-3**: C√≥digo n√£o roda ou n√£o extrai nada

üéØ **EXEMPLO DE AVALIA√á√ÉO CORRETA**:
Se o aluno extrai dados corretos e o c√≥digo roda sem erro:
- ‚úÖ CORRETO: "Extrai dados corretos e c√≥digo funciona"
- ‚ùå INCORRETO: "Usa seletores CSS incorretos, deveria usar tabela"

=== CRIT√âRIOS FUNDAMENTAIS DE AVALIA√á√ÉO ===

**DEFINI√á√ÉO DE PROBLEMAS vs SUGEST√ïES:**

**PROBLEMAS (s√≥ inclua aqui se for CR√çTICO):**
- Requisitos OBRIGAT√ìRIOS do enunciado que est√£o AUSENTES ou INCORRETOS
- Fun√ß√µes obrigat√≥rias que n√£o foram implementadas ou n√£o funcionam
- Estrutura de c√≥digo que n√£o segue o especificado no enunciado
- Funcionalidades essenciais que n√£o operam corretamente

**SUGEST√ïES (inclua aqui melhorias opcionais):**
- Melhorias de c√≥digo que n√£o s√£o obrigat√≥rias
- Otimiza√ß√µes de performance que n√£o afetam funcionalidade
- Adi√ß√µes de funcionalidades extras que enriquecem mas n√£o s√£o exigidas
- Melhorias de legibilidade ou organiza√ß√£o n√£o obrigat√≥rias
- Sugest√µes de boas pr√°ticas que n√£o s√£o requisitos

**EXEMPLOS DE CLASSIFICA√á√ÉO:**
- ‚ùå PROBLEMA: "Fun√ß√£o get_stock_url() n√£o foi implementada" (se for obrigat√≥ria)
- ‚úÖ SUGEST√ÉO: "Poderia adicionar valida√ß√£o de formato de data"
- ‚ùå PROBLEMA: "Dashboard n√£o tem 3 filtros" (se for obrigat√≥rio)
- ‚úÖ SUGEST√ÉO: "Poderia melhorar a apresenta√ß√£o visual dos gr√°ficos"

=== INSTRU√á√ïES DE AVALIA√á√ÉO ESPEC√çFICAS ===

Este √© um assignment de recupera√ß√£o que combina Web Scraping do Yahoo Finance + Streamlit Dashboard. Avalie considerando:

1. **Funcionamento do Scraping Yahoo Finance (35% do peso)**:
   - A fun√ß√£o `get_stock_url()` deve construir corretamente a URL com par√¢metros
   - A fun√ß√£o `convert_to_unix()` deve converter datas para formato Unix corretamente
   - A fun√ß√£o `get_page_data()` deve fazer requisi√ß√µes HTTP com User-Agent apropriado
   - A fun√ß√£o `scrap_stock_page()` deve extrair dados da p√°gina HTML com BeautifulSoup
   - O programa deve aceitar c√≥digos de a√ß√µes como argumentos de linha de comando
   - O programa deve solicitar datas no formato AAAA-MM-DD
   - O programa deve exibir valores encontrados para cada a√ß√£o

2. **Dashboard Streamlit (50% do peso)**:
   - Deve ter t√≠tulo personalizado seguindo o padr√£o "Dashboard Final: <T√≠tulo do seu Projeto>"
   - Deve ter 3 filtros na sidebar (text_input, checkbox, radio, selectbox, multiselect, slider)
   - Deve exibir tabela de dados carregada do CSV
   - Deve ter 2 gr√°ficos interativos relevantes para os dados
   - Deve ter descri√ß√£o/resumo com markdown ou write
   - Deve usar o arquivo `dados/output.csv` como fonte de dados

3. **Estrutura e Organiza√ß√£o (15% do peso)**:
   - O aluno deve manter a estrutura fornecida no enunciado
   - N√£o deve modificar nomes de fun√ß√µes ou par√¢metros dados
   - Deve manter separa√ß√£o entre scraping (yahoo.py) e dashboard (main.py)
   - Deve manter o arquivo test_yahoo.py inalterado
   - Deve gerar CSV com dados para uso no dashboard

=== FORMATO DE RESPOSTA ===

Formate sua resposta EXATAMENTE assim:

NOTA: [n√∫mero de 0 a 10]
JUSTIFICATIVA: [justificativa resumida e clara da nota]

COMENTARIOS: [lista de coment√°rios sobre pontos positivos]

SUGESTOES: [lista de sugest√µes de melhoria - apenas melhorias opcionais]

PROBLEMAS: [lista de problemas encontrados - apenas requisitos obrigat√≥rios ausentes/incorretos]

=== REGRAS CR√çTICAS ===

1. **NOTA 10**: Se TODOS os requisitos obrigat√≥rios do enunciado foram cumpridos
2. **PROBLEMAS**: S√≥ inclua requisitos OBRIGAT√ìRIOS ausentes/incorretos
3. **SUGEST√ïES**: Inclua melhorias opcionais e aperfei√ßoamentos
4. **N√ÉO CONFUNDA**: Melhorias n√£o s√£o problemas, problemas s√£o falhas obrigat√≥rias
5. **BASEIE A NOTA**: Nos requisitos do enunciado, n√£o em suas prefer√™ncias pessoais
6. **CONSIDERE CONTEXTO**: Esta √© uma atividade de recupera√ß√£o, avalie com rigor mas justi√ßa

IMPORTANTE: Considere que o aluno recebeu uma estrutura base no enunciado. Avalie principalmente se ele implementou corretamente as funcionalidades solicitadas tanto no scraping quanto no dashboard, e se fez escolhas inteligentes para filtros e gr√°ficos. Esta atividade combina duas compet√™ncias importantes: web scraping e visualiza√ß√£o de dados. 