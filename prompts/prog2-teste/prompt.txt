Analise o código Python abaixo para o assignment "{assignment_name}".

DESCRIÇÃO DO ASSIGNMENT:
{assignment_description}

REQUISITOS ESPECÍFICOS:
{assignment_requirements}

CÓDIGO DO ENUNCIADO:
{enunciado_code}

CÓDIGO DO ALUNO:
{student_code}

=== CRITÉRIOS FUNDAMENTAIS DE AVALIAÇÃO ===

**DEFINIÇÃO DE PROBLEMAS vs SUGESTÕES:**

**PROBLEMAS (só inclua aqui se for CRÍTICO):**
- Requisitos OBRIGATÓRIOS do enunciado que estão AUSENTES ou INCORRETOS
- Funções ou componentes obrigatórios que não foram implementados ou não funcionam
- Estrutura de código que não segue o especificado no enunciado
- Funcionalidades essenciais que não operam corretamente

**SUGESTÕES (inclua aqui melhorias opcionais):**
- Melhorias de código que não são obrigatórias
- Otimizações de performance que não afetam funcionalidade
- Adições de funcionalidades extras que enriquecem mas não são exigidas
- Melhorias de legibilidade ou organização não obrigatórias
- Sugestões de boas práticas que não são requisitos

**EXEMPLOS DE CLASSIFICAÇÃO:**
- ❌ PROBLEMA: "Banco de dados não tem relacionamento N:N" (se for obrigatório)
- ✅ SUGESTÃO: "Poderia adicionar mais tratamento de erros nas queries"
- ❌ PROBLEMA: "Dashboard não tem filtro" (se for obrigatório)
- ✅ SUGESTÃO: "Poderia melhorar a apresentação visual dos componentes"

=== INSTRUÇÕES DE AVALIAÇÃO ESPECÍFICAS ===

Este é um assignment de Banco de Dados PostgreSQL + Dashboard Streamlit. Avalie considerando:

1. **Banco de Dados PostgreSQL (30% do peso)**:
   - Deve ter de 3 a 4 tabelas conforme especificado
   - Deve possuir relacionamento N:N (tabela intermediária)
   - Todos os campos devem ser NOT NULL
   - Deve ter pelo menos um campo DATE e um DECIMAL
   - Deve usar tipos VARCHAR e INTEGER
   - Relacionamentos devem estar explicitamente definidos
   - Arquivo bd.sql deve permitir reconstrução completa do banco

2. **Conectividade e Queries SQL (30% do peso)**:
   - Conexão com PostgreSQL usando SQLAlchemy Core
   - Query da tabela principal deve usar pelo menos 1 JOIN
   - Query do gráfico deve usar 1 JOIN e 1 GROUP BY
   - Uso correto de pandas para carregar dados (pd.read_sql)
   - Queries devem estar funcionais e retornar dados

3. **Dashboard Streamlit (40% do peso)**:
   - Deve ter tabela central com dados de JOIN
   - Deve ter filtro funcional (selectbox) que afeta a tabela
   - Deve ter gráfico baseado em query diferente com JOIN e GROUP BY
   - Filtro deve usar parâmetros SQL para segurança (:filtro)
   - Interface deve ser funcional e apresentar dados corretamente

4. **Estrutura e Organização**:
   - Código deve estar organizado no main.py
   - Imports devem estar corretos (sqlalchemy, pandas, streamlit)
   - Deve seguir as etapas especificadas nas instruções

=== FORMATO DE RESPOSTA ===

Formate sua resposta EXATAMENTE assim:

NOTA: [número de 0 a 10]
JUSTIFICATIVA: [justificativa resumida e clara da nota]

COMPONENTES:
- Banco de Dados (3-4 tabelas, N:N, tipos corretos): [Presente/Ausente/Parcial]
- Conexão SQLAlchemy: [Presente/Ausente]
- Query Tabela (JOIN): [Presente/Ausente]
- Query Gráfico (JOIN + GROUP BY): [Presente/Ausente]
- Filtro Streamlit: [Presente/Ausente]
- Dashboard Funcional: [Presente/Ausente]

COMENTARIOS: [lista de comentários sobre pontos positivos]

SUGESTOES: [lista de sugestões de melhoria - apenas melhorias opcionais]

PROBLEMAS: [lista de problemas encontrados - apenas requisitos obrigatórios ausentes/incorretos]

=== REGRAS CRÍTICAS ===

1. **NOTA 10**: Se TODOS os requisitos obrigatórios do enunciado foram cumpridos
2. **PROBLEMAS**: Só inclua requisitos OBRIGATÓRIOS ausentes/incorretos
3. **SUGESTÕES**: Inclua melhorias opcionais e aperfeiçoamentos
4. **NÃO CONFUNDA**: Melhorias não são problemas, problemas são falhas obrigatórias
5. **BASEIE A NOTA**: Nos requisitos do enunciado, não em suas preferências pessoais

IMPORTANTE: Este é um teste que avalia conhecimentos de SQL, banco de dados relacional e dashboards. Priorize a correta implementação dos relacionamentos, queries com JOINs e a funcionalidade do dashboard. Considere que o aluno deve ter seguido as 4 etapas especificadas nas instruções.