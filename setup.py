"""
Script de setup para o sistema de corre√ß√£o autom√°tica.
"""
#!/usr/bin/env python3

import os
import sys
import subprocess
from pathlib import Path


def check_python_version():
    """Verifica se a vers√£o do Python √© compat√≠vel."""
    if sys.version_info < (3, 9):
        print("‚ùå Erro: Python 3.9+ √© necess√°rio")
        print(f"   Vers√£o atual: {sys.version}")
        return False
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} detectado")
    return True


def check_pipenv():
    """Verifica se o pipenv est√° instalado."""
    try:
        result = subprocess.run(['pipenv', '--version'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ pipenv detectado")
            return True
    except FileNotFoundError:
        pass
    
    print("‚ùå pipenv n√£o encontrado")
    return False


def install_pipenv():
    """Instala o pipenv."""
    print("üì¶ Instalando pipenv...")
    try:
        subprocess.run([sys.executable, '-m', 'pip', 'install', 'pipenv'], 
                      check=True)
        print("‚úÖ pipenv instalado com sucesso")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao instalar pipenv: {e}")
        return False


def install_dependencies():
    """Instala as depend√™ncias do projeto."""
    print("üì¶ Instalando depend√™ncias...")
    try:
        subprocess.run(['pipenv', 'install'], check=True)
        print("‚úÖ Depend√™ncias instaladas com sucesso")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao instalar depend√™ncias: {e}")
        return False


def check_directories():
    """Verifica se os diret√≥rios necess√°rios existem."""
    base_path = Path(__file__).parent
    
    required_dirs = [
        base_path / "enunciados",
        base_path / "respostas"
    ]
    
    missing_dirs = []
    for dir_path in required_dirs:
        if not dir_path.exists():
            missing_dirs.append(dir_path.name)
        else:
            print(f"‚úÖ Diret√≥rio {dir_path.name} encontrado")
    
    if missing_dirs:
        print(f"‚ö†Ô∏è  Diret√≥rios ausentes: {', '.join(missing_dirs)}")
        print("   Certifique-se de que os diret√≥rios 'enunciados' e 'respostas' existem")
        return False
    
    return True


def create_reports_directory():
    """Cria o diret√≥rio de relat√≥rios."""
    reports_dir = Path(__file__).parent / "reports"
    reports_dir.mkdir(exist_ok=True)
    print("‚úÖ Diret√≥rio 'reports' criado")


def check_openai_key():
    """Verifica se a chave da API OpenAI est√° configurada."""
    api_key = os.getenv("OPENAI_API_KEY")
    if api_key:
        print("‚úÖ OPENAI_API_KEY configurada")
        return True
    else:
        print("‚ö†Ô∏è  OPENAI_API_KEY n√£o configurada")
        print("   Configure a vari√°vel de ambiente:")
        print("   export OPENAI_API_KEY='sua-chave-api-aqui'")
        return False


def run_tests():
    """Executa os testes b√°sicos."""
    print("üß™ Executando testes...")
    try:
        result = subprocess.run(['pipenv', 'run', 'pytest', 'tests/', '-v'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Testes passaram")
            return True
        else:
            print("‚ùå Alguns testes falharam")
            print(result.stdout)
            return False
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao executar testes: {e}")
        return False


def test_cli():
    """Testa se a CLI est√° funcionando."""
    print("üîß Testando CLI...")
    try:
        result = subprocess.run(['pipenv', 'run', 'python', '-m', 'src.main', '--help'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ CLI funcionando corretamente")
            return True
        else:
            print("‚ùå Erro na CLI")
            return False
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao testar CLI: {e}")
        return False


def main():
    """Fun√ß√£o principal do setup."""
    print("üöÄ Setup do Sistema de Corre√ß√£o Autom√°tica")
    print("=" * 50)
    
    # Verifica√ß√µes b√°sicas
    if not check_python_version():
        sys.exit(1)
    
    if not check_pipenv():
        if not install_pipenv():
            sys.exit(1)
    
    # Instala√ß√£o de depend√™ncias
    if not install_dependencies():
        sys.exit(1)
    
    # Verifica√ß√£o de diret√≥rios
    if not check_directories():
        print("\n‚ö†Ô∏è  Certifique-se de que os diret√≥rios necess√°rios existem")
        print("   O sistema pode n√£o funcionar corretamente")
    
    # Cria√ß√£o de diret√≥rios
    create_reports_directory()
    
    # Verifica√ß√£o da API key
    check_openai_key()
    
    # Testes
    print("\n" + "=" * 50)
    print("üß™ Executando verifica√ß√µes finais...")
    
    if run_tests():
        print("‚úÖ Testes b√°sicos passaram")
    else:
        print("‚ö†Ô∏è  Alguns testes falharam, mas o sistema pode funcionar")
    
    if test_cli():
        print("‚úÖ Interface de linha de comando funcionando")
    else:
        print("‚ùå Problema com a interface de linha de comando")
        sys.exit(1)
    
    print("\n" + "=" * 50)
    print("üéâ Setup conclu√≠do com sucesso!")
    print("\nüìñ Pr√≥ximos passos:")
    print("1. Configure sua OPENAI_API_KEY se ainda n√£o fez")
    print("2. Ative o ambiente virtual: pipenv shell")
    print("3. Teste o sistema:")
    print("   python -m src.main list-assignments")
    print("   python -m src.main list-turmas")
    print("\nüìö Para mais informa√ß√µes, consulte o README.md")


if __name__ == "__main__":
    main() 